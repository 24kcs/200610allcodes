/*
  1. 创建项目所需所有的目录:
  api:存储封装后的api接口函数的及二次封装的axios(请求拦截器和响应拦截器)
  components:普通组件
  mock:模拟后台数据
  pages:路由组件
  router:路由器配置
  store:vuex的配置
  utils:相关工具的文件
  2. 安装所需要的插件
  npm install vuex vue-router axios less less-loader
  建议:一个一个的安装
  脚手架的项目中如果样式使用的是less ,那么需要安装两个插件less less-loader
  脚手架的项目中如果样式使用的是stylus ,那么需要安装两个插件stylus stylus-loader


  3.配置路由组件:
  Home/Search/Login/Register
  4.两个普通组件:
  Header/Footer
  5.拆分各个组件
  6.TypeNav设置为全局公共组件
  7.Home组件中各个组件进行拆分
  8.二次封装axios(请求拦截器和响应拦截器)Nprogress插件,请求的时候有进度条
  9.通过PostMan工具测试接口
  10.封装api接口函数
  11.配置跨域:vue.config.js 中进行跨域的配置



1.打开api文档(读)
2.postMan测试接口(参数如何传递)
3.封装api接口(参数如何传递)
4.测试api接口(找bug,跨域,无结果,没报错)
5.封装vuex(state,mutations,actions--->随便写哪个文件都可以完成封装)
6.组件中使用(遍历,计算属性的东西)

 */

 /*
 
  1.脚手架的项目模版实现跨域问题:
  脚手架启动的项目会自带个服务器把页面启动起来,产生了对应的地址:localhost:8080
  该项目需要访问对应的某个服务器,需要服务器的地址:http://182.92.128.115
  此时浏览器的地址和服务器的地址是不同的,需要进行跨域解决
  正向代理:当前的服务器代理了当前的页面中的地址,向另一个服务器发送请求
  脚手架3/4配置跨域的问题:在vue.config.js文件中进行配置(vue.config.js文件需要自己手动创建)
    devServer: {
    proxy: {
      '/api': {
        target: 'http://182.92.128.115', // 服务器地址
        changeOrigin: true // 是否跨域
      }
    }
  }
  脚手架2配置跨域的问题:config目录中的index.js文件中
    proxyTable: {
       '/api': {
        target: 'http://182.92.128.115', // 服务器地址
        changeOrigin: true // 是否跨域
      }
    },

  2.项目中是否需要使用vuex的原因:组件之间进行通信(父子(直接/间接)组件通信),项目开发组的决定(老大说了算)
  3.项目中前后台交互的流程思路:
    1)查看api接口文档------>PostMan(测试接口的工具)---->测试接口---->定义api接口函数--->在某个组件中测试该api接口函数,封装vuex
    2)组件中获取数据的代码思路开发流程
    组件------>$store.dispatch('action')---->vuex(action)---->发送异步请求---->获取数据---->vuex(mutation)---->vuex(state)---->数据的更新----->组件($store.state.xxx/...mapState())

  封装Vuex
    state,mutations,actions,getters,modules
    state:包含了多个状态数据的对象
    mutations:包含了多个直接修改状态数据的对象
    actions:包含了多个间接修改状态数据的对象
    getters:包含了多个状态数据的计算属性的get方法的对象
    modules:包含了多个模块
 
  4.遍历三级分类信息的时候内部有三层的v-for的遍历数据操作,为了每个分类菜单点击的时候可以跳转到search组件界面,使用的是<router-link/>路由链接的方式,但是,如果这么做,界面出现卡顿效果,如果解决?使用的是事件委托的方式+h5中的dataset自定义属性的方式,为这些标签的最外面的标签注册点击事件
  5.分类信息列表需要进行高亮显示/对应菜单展示和隐藏的操作(函数的节流),也有函数的防抖

      为了提升用户的操作体验
      有的时候需要限定一些用户的行为---------防抖或者节流的方式来实现

      函数的节流: 隔一段时间就会执行一次某个回调函数
        首先先执行一次,然后在间隔的时间内再执行,大于设定的执行时间(周期),才会执行下一次,适合多次的事件按照设置的事件间隔来触发
        应用场景
          窗口的应用,页面的滚动,拖拽的行为,鼠标进入和鼠标离开的相关的事件的操作(疯狂的抢购)

      函数的防抖:只执行最后一次
        在函数频繁触发的时候,在规定的时间内,只能让最后一次的回调执行
        应用场景：
          实时的联想搜索--->键盘的抬起事件
          文本框输入内容验证操作(ajax发送请求的操作)
    
    
    6.Search组件中使用TypeNav组件
    7.Home界面中需要展示轮播图的效果
      1)轮播图的数据/楼层的数据是不存在,又要调用api接口函数,发送请求,获取轮播图数据和楼层的数据
      mockjs来拦截ajax请求,并生成随机数据
      2) 设计一些类似于后台的的数据,保存在.json文件中,通过mock的方式拦截对应的请求的地址,并把数据返回
      3) 面试题:通过mockjs的方式实现登录成功或失败的操作,帐号和密码分别是:admin/888888,如果成功则跳转到成功界面,显示欢迎xxx登录到xxx公司管理系统,如果失败则提示:帐号或密码失败
        答: mockjs设计帐号和密码
        下载脚手架+配置跨域+express/koa(koa-router)快速的搭建服务器(服务器的地址)+mockjs设计数据+vuex,搭建一个简单的登录界面,内部需要获取帐号和密码,点击登录按钮,发送请求和后台中的帐号和密码对比,从而实现功能

    8. 页面中需要展示轮播图的效果:安装swiper@5.4.2插件,需要先引入swiper/css,创建Swiper的对象,从而实现轮播图的效果





    开发通用组件的思路流程:
    1. 搭建结构和样式:html+css
    2. 初始化一些数据:data数据的初始化
    3. 接收调用该组件的时候传入的数据,props
        props:{} 万一,别人没有传入数据,要考虑当前组件的健壮性(稳定性),可以让这些传入的数据有默认的值
        总条数数据:total:0
        默认选中的页码: pageNo:1
        每页显示的条数数据: pageSize:5
        连续的页码数(奇数): showPageNo:5
        

    4. 需要接收什么样的事件(该事件可能是在当前的自己的组件中使用,也有可能是为外部的父级组件服务的)
    5.制作组件

    6. 制作组件使用的文档
      1) 传递什么样的参数
      2) 传递什么样的事件
      3) 组件怎么使用

  



  */