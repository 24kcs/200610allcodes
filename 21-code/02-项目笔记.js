/*

1. vue-element-admin  网络上的一些组织或者是个人 因为发现公司中很多人使用vue+element-ui组件的方式进行项目的开发,所以,有些人自己开始了这个项目的包---相当于是项目的模版

2. vue + vue-cli _element + axios + swagger(线上测试接口的工具)

src目录:
  api: api接口函数目录
  utils目录: 有二次封装axios
  components:普通组件的目录
  config:路由的配置



  品牌管理模块
    思路: 测试接口(swagger),搭建界面(element-ui组件库),操作数据---增加,修改,删除,查询

    使用到的组件:
    Button/Table/Pagination/Dialog/Upload/Input/MessageBox/Message

    Vue中的组件的时候: 
    组件的命名: 首字母大写,多个单词每个单词的首字母都是大写的
      例子: HuaPay  ,HuaSearch
    组件的使用: <HuaPay/> ----> <hua-pay/>  <hua-search>



  面试题:
  Vue中组件通信的方式(普通的):
    1. props: 父子组件之间通信,可以传递动态的属性或者是回调函数
    2. 自定义事件:父子组件之间通信,事件
    3. 事件总线:任意组件之间进行通信,本质:原型
    4. PubSub消息订阅:不属于Vue,单独的一个插件(React中同样可以使用),任意组件通信
    5. 插槽(普通插槽:没有名字,具名插槽:有名字,作用域插槽):父子组件通信
    6. vuex:任意组件通信
  Vue中组件通信的方式(高级的):
    1. 自定义事件和原生事件
      原生事件和自定义事件,主要是针对组件而言的,组件中可以使用原生事件,也可以使用自定义事件
      原生事件:系统自带的,事件绑定了回调函数后,事件一旦触发,对应的回调函数中的代码就会自动的执行
      自定义事件:自己定义的事件
      组件中原生事件:使用了系统自带的事件,并且使用了.native进行修饰
      组件中自定义事件:自己定义的或者使用了系统自带的事件,但是没有使用.native进行修饰
      组件中的原生事件,最终事件给了子级组件中的最外层的html标签了(使用了事件委托的方式实现的)
      组件中的自定义事件:是子级组件内部手动的分发父级组件传递过来的自定义事件,才能够正常的使用

      组件中使用了自定义事件,但是又使用了.native进行了修饰,此时到底是原生事件还是自定义事件?
      自定义事件

      组件中传递自定义事件的方式:可以实现父子组件,子父组件进行通信
    2. v-model指令实现组件通信(本质:value属性和input事件)
      当一个组件中使用了v-model指令,也就意味着,向这个子级组件传递了value属性和input事件,子级组件中可以接收并使用value属性的数据,同时也可以分发input自定义事件,最终可以实现父子,子父组件的通信

    3. .sync修饰符实现父子组件通信
      .sync的本质:向子级组件内部动态传递数据,子级内部分发父级组件传递的自定义的update事件,从而实现数据更新,其实是:父子组件通信
    4. $attrs和$listeners实现组件通信
      $attrs: 父级组件向子级组件中传递的所有的属性,(class和stlye和props接收的属性)都不会在$attrs中存在
      $listeners:父级组件向子级组件中传递的所有的事件,(.native修饰符的原生事件)除外,
      v-bind:可以绑定对象的形式
      v-on:可以绑定对象的形式

    5. $children 和 $parent 实现组件通信
    $children:可以获取当前的父级组件中的直接子级组件(间接的父子关系的组件是不行的)
    $parent:可以获取当前组件的直接父级组件,要有才可以

    6. 作用域插槽:可以实现父子,子父组件传递数据,组件通信


    





*/